swagger: '2.0'
info:
  version: 1.0.0
  title: dmdProjectAPI
host: hms.anzuev.ru:8888
tags:
  - name: auth
    description: requests for authorization
  - name: private
    description: requests available only for authorized users
  - name: public
    description: requests available for all users
  - name: admin
    description: requests available only for admins
  - name: client
    description: requests available only for clients
  - name: employee
    description: requests available only for employees
schemes:
  - http
paths:

  /Admin/auth/login:
    post:
      description: Login
      parameters:
        - name: authData
          in: body
          description: data for authorization
          schema:
            $ref: '#/definitions/AuthorizationRequestModel'
      tags:
        - auth
        - admin
      responses:
        '200':
          description: Login and password are correct
          schema:
            $ref: '#/definitions/Staff'
        '401':
          description: Login or password are incorrect
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Admin/auth/logout:
    post:
      description: Logout
      tags:
        - auth
        - admin
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized, you can not logout
        
  /Admin/private/hotel/new:
    put:
      description: create new hotel
      parameters:
        - name: newHotel
          in: body
          schema:
            $ref: '#/definitions/CreateHotelModelRequest'
      tags:
        - private
        - admin
      responses:
        '200':
          description: Successful creation
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Common error
          
  /Admin/private/hotels/full:
    get:
      description: get all hotels with description
      tags:
        - private
        - admin
      responses:
        '200':
          description: Everything is ok, user has received all hotels
          schema:
            type: array
            items:
              $ref: '#/definitions/HotelModelResponse'
        '204':
          description: No hotels found
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Admin/private/owner/update:
    post:
      description: create or update info about owner of some hotel
      parameters:
        - name: ownerData
          in: body
          description: data for creation / update
          schema:
            $ref: '#/definitions/CreateEditHotelOwnerModelRequest'
      tags:
        - private
        - admin
      responses:
        '201':
          description: Successful creation
          schema:
            $ref: '#/definitions/OwnerIdResponseModel'
        '200':
          description: Successful update
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Admin/private/owner/all:
   get:
      description: get all owners
      tags:
        - private
        - admin
      responses:
        '200':
          description: Everything is ok, user has received a list of owners
          schema:
            type: array
            items:
              $ref: '#/definitions/OwnerResponseModel'
        '204':
          description: No owners
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/auth/login:
    post:
      description: Login
      parameters:
        - name: authData
          in: body
          description: data for authorization
          schema:
            $ref: '#/definitions/AuthorizationRequestModel'
      tags:
        - auth
        - client
      responses:
        '200':
          description: Login and password are correct
          schema:
            $ref: '#/definitions/Staff'
        '401':
          description: Login or password are incorrect
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/auth/logout:
    post:
      description: Logout
      tags:
        - auth
        - client
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized, you can not logout
  
  /Client/private/profile/edit:
    post:
      description: Edit profile
      parameters:
        - name: EditProfileModel
          in: body
          description: Data for editing
          schema:
            $ref: '#/definitions/NewClientModel'
      tags:
        - private
        - client
      responses:
        '200':
          description: Profile has been edited
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend;
          schema:
            $ref: '#/definitions/Error'
            
  /Client/hotels/full:
    get:
      description: get all hotels with description
      tags:
        - public
        - client
      responses:
        '200':
          description: 'Everything is ok, user has received all hotels'
          schema:
            type: array
            items:
              $ref: '#/definitions/HotelModelResponse'
        '204':
          description: No hotels found
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/hotels/short:
    get:
      description: get all hotels with description
      tags:
        - public
        - client
      responses:
        '200':
          description: 'Everything is ok, user has received all hotels'
          schema:
            type: array
            items:
              $ref: '#/definitions/HotelModelResponseShort'
        '204':
          description: No hotels found
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/hotel/{hotelId}/rooms/getTypes/full:
    get:
      description: get all room types of hotel with description
      tags:
        - public
        - client
      parameters:
        - name: hotelId
          in: path
          type: string
          required: true
          description: hotel id
      responses:
        '200':
          description: Everything is ok, user has received all room types
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomTypeResponseModel'
        '204':
          description: No room types found
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/hotel/{hotelId}/rooms/getTypes/short:
    get:
      description: get all room types of hotel without description
      tags:
        - public
        - client
      parameters:
        - name: hotelId
          in: path
          type: string
          required: true
          description: hotel id
      responses:
        '200':
          description: Everything is ok, user has received all room types
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomTypeResponseModelShort'
        '204':
          description: No room types found
        '500':
          description: Something bad happened on the backend;
          schema:
            $ref: '#/definitions/Error'
  
  /Client/auth/signUp:
    post:
      description: sign up
      parameters:
        - name: user
          in: body
          description: The user JSON to sign up
          schema:
            $ref: '#/definitions/NewClientModel'
          required: true
      tags: 
        - auth
        - client
      responses:
        200:
          description: User has been created
          schema:
            $ref: '#/definitions/Client'
        400:
          description: Unable to validate user data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Client/rooms/getAvailableRooms:
    get:
      description: get available rooms for specific period of time
      tags:
        - public
        - client
      parameters:
        - name: search
          in: body
          required: true
          schema:
            $ref: '#/definitions/AvailableRoomRequestModel'
      responses:
        '200':
          description: 'Everything is ok, user has received all available rooms'
          schema:
            type: array
            items:
              $ref: '#/definitions/AvailableRoomResponseModel'
        '204':
          description: No rooms available for this date
        '500':
          description: Something bad happened on the backend;
          schema:
            $ref: '#/definitions/Error'
  
  /Client/private/rooms/book:
    put:
      description: book room
      parameters:
        - name: bookItem
          in: body
          description: data for booking
          schema:
            $ref: '#/definitions/BookModelRequest'
      tags:
        - private
        - client
      responses:
        '200':
          description: Room has been successfully booked. State - booked
        '401':
          description: 'Unauthorized, you can''t book room if you are not authorized'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend;
          schema:
            $ref: '#/definitions/Error'
            
  /Client/private/orders/cancel:
    post:
      description: cancel order
      parameters:
        - name: CancelOrderItem
          in: body
          description: Data for canceling
          schema:
            $ref: '#/definitions/CancelBookRequestModel'
      tags:
        - private
        - client
      responses:
        '200':
          description: Order is canceled
        '401':
          description: 'Unauthorized, you can''t cancel order if you are not authorized'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No order found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend;
          schema:
            $ref: '#/definitions/Error'
            
  /Client/private/orders:
    get:
      description: Get a list of orders of a current client
      tags:
        - private
        - client
      responses:
        '200':
          description: Array of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderedRoomResponseModel'
        '204':
          description: No order's found
        '401':
          description: Your are not allowed to see your orders while you are not authorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: >-
            Серверная ошибка(если в описании указано, что это необработанная
            ошибка - срочно сообщаем разработчику)
          schema:
            $ref: '#/definitions/Error'
  
  /Employee/auth/login:
    post:
      description: Login
      parameters:
        - name: authData
          in: body
          description: data for authorization
          schema:
            $ref: '#/definitions/AuthorizationRequestModel'
      tags:
        - auth
        - employee
      responses:
        '200':
          description: Login and password are correct
          schema:
            $ref: '#/definitions/Staff'
        '401':
          description: Login or password are incorrect
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/auth/logout:
    post:
      description: Logout
      tags:
        - auth
        - employee
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized, you can not logout          
            
  /Employee/private/owner/employees/update:
    put:
      description: Create or update an employee
      parameters:
        - name: empData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/CreateEditEmployeeModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful update
          schema:
            $ref: '#/definitions/EmployeeIdResponseModel'
        '201':
          description: User created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Invalid data
          schema:
            $ref: '#/definitions/Error'
            
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/owner/employees/all:
    get:
      description: get all employees
      tags:
        - private
        - employee
      responses:
        '200':
          description: 'Everything is ok, user has received everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeResponseModel'
        '204':
          description: No employees
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/owner/employees/delete:
    post:
      description: Delete info about employee
      parameters:
        - name: empData
          in: body
          description: id to delete
          schema:
            $ref: '#/definitions/DeleteEmployeeModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful delete
        '201':
          description: Not found
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/room/update:
    post:
      description: create or update info about a room
      parameters:
        - name: roomData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/RoomModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful update
        '201':
          description: Created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Invalid data
            
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/room/all:
    get:
      description: get all rooms in a hotel
      tags:
        - private
        - employee
      responses:
        '200':
          description: 'Everything is ok, user has received everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomModelResponse'
        '204':
          description: No rooms ever
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'          
     
  /Employee/private/owner/hotel/update:
    post:
      description: update information about hotel
      parameters:
        - name: newHotel
          in: body
          schema:
            $ref: '#/definitions/EditHotelModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful update
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Common error
          
  /Employee/private/hotel/information:
    get:
      description: get information about hotel by owner
      tags:
        - private
        - employee
      responses:
        '200':
          description: 'Everything is ok, user has received all room types'
          schema:
            items:
              $ref: '#/definitions/HotelModelResponse'
              
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
          
        '500':
          description: Common error
              
  /Employee/private/order/pay:
    post:
      description: payment request
      parameters:
        - name: payData
          in: body
          description: data for payment
          schema:
            $ref: '#/definitions/OrderIDModelRequest'
      tags:
        - private
        - employee
      responses:     
        200:
          description: Successful payment
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
            description: Invalid data
        '500':
            description: Something bad happened on the backend
            schema:
              $ref: '#/definitions/Error'
        
  /Employee/private/order/cancel:
    post:
      description: cancel an order
      parameters:
        - name: payData
          in: body
          description: data for payment
          schema:
            $ref: '#/definitions/OrderIDModelRequest'
      tags:
        - private
        - employee
      responses:     
        200:
          description: Successful cancel
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
            description: Invalid data
        '500':
            description: Something bad happened on the backend
            schema:
              $ref: '#/definitions/Error'
              
  /Employee/private/orders:
    post:
      description: Get a list of orders of a current client
      parameters:
        - name: modelRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/OrderListModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Array of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderModelResponse'
        '204':
          description: No orders found
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: >-
            Серверная ошибка(если в описании указано, что это необработанная
            ошибка - срочно сообщаем разработчику)
          schema:
            $ref: '#/definitions/Error'

  /Employee/private/roomtype/update:
    post:
      description: update info about roomtype
      parameters:
        - name: roomtypeData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/RoomTypeModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful update
          schema:
            $ref: '#/definitions/RoomTypeResponseModelShort'
        '201':
          description: Created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Invalid data
            
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/roomtype/all:
    get:
      description: get all roomtypes
      tags:
        - private
        - employee
      responses:
        '200':
          description: 'Everything is ok, user has received everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeRoomTypeResponseModel'
        '204':
          description: No roomtypes
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on the backend
          schema:
            $ref: '#/definitions/Error'
            
  /Employee/private/roomtype/delete:
    post:
      description: update info about roomtype
      parameters:
        - name: roomtypeData
          in: body
          description: id to delete
          schema:
            $ref: '#/definitions/DeleteRoomTypeModelRequest'
      tags:
        - private
        - employee
      responses:
        '200':
          description: Successful deleting
        '404':
          description: Not found
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Something bad happened on backend
          schema:
            $ref: '#/definitions/Error'
            
definitions:
  Error:
    type: object
    properties:
      fieldErrors:
        type: array
        items:
          type: object
          properties:
            field:
              type: string
            message:
              type: string
      commonErrors:
        type: array
        items:
          type: string

  Staff:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      hash_password:
        type: string
      hotel_id: 
        type: integer
        format: int64
        
  CreateEditHotelOwnerModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      password:
        type: string
      hotelId:
        type: integer
        format: int64
        
  OwnerResponseModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      hotelId:
        type: integer
        format: int64
      hotelTitle:
        type: string
        
  CreateEditEmployeeModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      password:
        type: string
  
  OwnerIdResponseModel:
    type: object
    properties:
      ownerID:
        type: integer
        format: int64
        
  OrderModelResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      roomNumber:
        type: integer
      startDate:
        type: string
        format: date-time
      finishDate:
        type: string
        format: date-time
      status:
        type: string
      cost:
        type: integer
        format: double
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      phoneNumber:
        type: string
  
  AuthorizationRequestModel:
    type: object
    properties:
      mail:
        type: string
      password:
        type: string
        
  NewClientModel:
    type: object
    properties:
      mail:
        type: string
      password:
        type: string
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      phoneNumber:
        type: string
        
  Client:
    type: object
    properties:
      id:
        type: integer
      mail:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      fatherName:
        type: string
      phoneNumber:
        type: string
        
  RoomTypeResponseModel:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      cost:
        type: integer
        format: double
        description: price per night
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      title:
        type: string
        description: type of room
  
  RoomTypeResponseModelShort:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      title:
        type: string
        description: type of room

  HotelModelResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of hotel
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phoneNumber:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
        
  HotelModelResponseShort:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of hotel
      title:
        type: string
        description: title of hotel
        
  CreateHotelModelRequest:
    type: object
    properties:
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phoneNumber:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
        
  EditHotelModelRequest:
    type: object
    properties:
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phone_number:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
        
  AvailableRoomResponseModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      roomNumber:
        type: integer
        format: int64
      cost:
        type: integer
        format: double
  
  AvailableRoomRequestModel:
    type: object
    properties:
      from:
        type: string
        format: date-time
        description: Date when user is going to arrive
      to:
        type: string
        format: date-time
        description: Date when user is going to leave
      roomTypeId:
        type: integer
        format: int64
        description: 'Id of room type. If specified - use it to filter, otherwise ignore it'
      hotelId:
        type: integer
        format: int64
        description: id of hotel
        
  BookModelRequest:
    type: object
    properties:
      from:
        type: string
        format: date-time
        description: Date when user is going to arrive
      to:
        type: string
        format: date-time
        description: Date when user is going to leave
      roomId:
        type: integer
        format: int64
        description: id of room to be booked
        
  OrderedRoomResponseModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of an order
      hotelId:
        type: integer
        description: id of a hotel
      roomNumber:
        type: integer
        description: id of a room
      from:
        type: string
        format: date-time
        description: start of a billing period
      to:
        type: string
        format: date-time
        description: end of a billing period
      status:
        type: string
        enum:
          - BOOKED
          - CANCELLED
          - PAID
      cost:
        type: number
        format: double
        description: price for a room during this period
  
  CancelBookRequestModel:
    type: object
    properties:
      orderId:
        type: integer
        format: int64
        description: id of order
        
  EmployeeIdResponseModel:
    type: object
    properties:
      employeeID:
        type: integer
        format: int64
        
  EmployeeResponseModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      type:
        type: string
        
  DeleteEmployeeModelRequest:
    type: object
    properties:
      employeeID:
        type: integer
        format: int64
        
  RoomModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of an room
      typeID:
        type: integer
        description: id of a hotel
      roomNumber:
        type: integer
        format: int64
        description: id of a room
      status:
        type: string
        enum:
          - WORKED
          - NOT_WORKED
          - DELETED
          
  RoomModelResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of a hotel
      typeId:
        type: integer
        format: int64
      typeName:
        type: string
      status:
        type: string
      roomNumber:
        type: integer
        format: int64
        description: id of a room
        
  OrderIDModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of an order
        
  OrderListModelRequest:
    type: object
    properties:
      from:
        type: string
        format: date-time
      to:
        type: string
        format: date-time
        
  RoomTypeModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of room type
      name:
        type: string
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      cost:
        type: number
        format: double
        
  DeleteRoomTypeModelRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of room type
        
  EmployeeRoomTypeResponseModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: id of room type
      title:
        type: string
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      cost:
        type: number
        format: double
